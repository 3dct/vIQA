name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  semantic_release:
    name: Semantic Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      tag: ${{ steps.release.outputs.tag }}
      released: ${{ steps.release.outputs.released }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          vcs_release: "false"

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: semantic_release
    runs-on: ${{ matrix.os }}
    if: needs.semantic_release.outputs.released == 'true'
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ ubuntu-24.04, windows-latest, macos-14 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: |
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          clang -v
        if: ${{ matrix.os == 'macos-14-large'}}

      - name: Select Xcode version
        run: |
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          clang -v
        if: ${{ matrix.os == 'macos-14'}}

#      - name: Setup Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.11" # update once build dependencies are available

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_PRERELEASE_PYTHONS: True
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "pyproject.toml"

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    needs: semantic_release
    runs-on: ubuntu-24.04
    if: needs.semantic_release.outputs.released == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

#      - name: Setup Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.11" # update once build dependencies are available

      - name: Build sdist
        run: pipx run build --sdist

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI and GitHub Releases
    needs: [semantic_release, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: needs.semantic_release.outputs.released == 'true'
    environment:
#      name: testpypi
      name: pypi
#      url: https://test.pypi.org/project/vIQA/
      url: https://pypi.org/project/vIQA/
    permissions:
      id-token: write
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          repository-url: https://test.pypi.org/legacy/

      - name: Test install from PyPI
        id: test_install
        run: |
            pip install vIQA
            python -c "import vIQA; print(vIQA.__version__)"
            echo "vIQA installed successfully"
            echo "tested=true" >> $GITHUB_OUTPUT

      - name: Publish package distributions to GitHub Releases
        if: steps.test_install.outputs.tested == 'true'
        uses: python-semantic-release/upload-to-gh-release@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.semantic_release.outputs.tag }}